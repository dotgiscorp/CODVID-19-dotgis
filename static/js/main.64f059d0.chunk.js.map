{"version":3,"sources":["layers/Sources/index.js","layers/Classes/MapboxHoverEffect.js","layers/Hooks/useMapEvents.js","components/Loader/index.js","components/PopupTemplate/index.js","components/LayerSelector/index.js","layers/Config/config.js","layers/Layers/index.js","layers/Config/queries.js","layers/Config/paints.js","layers/Hooks/useCartoTiles.js","map/index.js","serviceWorker.js","index.js"],"names":["Sources","config","sourceLoad","React","useState","sourcesLoaded","setLoaded","useEffect","newObj","Object","values","info","id","keys","every","k","map","isSource","key","sourceId","tileJsonSource","type","tiles","pbf","promoteId","undefined","onSourceLoaded","layer","HoverEffect","definition","this","sourceLayer","popupFieldsConfig","_hoveredFeature","_hoveredId","_popupInfo","e","getCanvas","style","cursor","features","length","setFeatureState","source","hover","coords","lngLat","popupFields","featureProperties","properties","popupField","hasOwnProperty","lng","lat","shouldRender","value","useMapEvents","layersIds","popupConfig","setPopupConfig","clickedFeature","setFeature","mapObject","hoverObjects","i","push","on","mouseMove","popup","popupInfo","mouseLeave","enableEvents","off","removeEvents","propTypes","PropTypes","instanceOf","Map","isRequired","shape","cadastre_id","object","Loader","dataLoading","setDataLoading","tilesRenderedChecker","once","waiting","isStyleLoaded","setTimeout","className","viewBox","cx","cy","r","fill","defaultProps","component","memo","content","infos","setInfos","index","fieldLabel","Intl","NumberFormat","format","label","prevProps","nextProps","LayerSelector","layers","visibility","setVisibility","shouldShowOnInit","switchVisibility","target","name","getLayer","getLayoutProperty","setLayoutProperty","checked","onClick","htmlFor","layerTitle","Layers","CONFIG","centerIn","geometry","coordinates","flyTo","center","zoom","Math","round","getZoom","essential","paint","layout","minZoom","maxZoom","display","offset","bottom","voronoi","cluster","aggregatedField","pharmacy","supermarket","label_paint","labelField","textColor","CartoMVTRequest","cartoAccount","cartoMapsKey","sql","getGeoJSON","aggregationConfig","mapConfig","buffersize","mvt","options","aggregation","fetch","method","headers","body","JSON","stringify","response","json","layergroup","metadata","tilejson","vector","carto_account","carto_maps_key","request_id","sql_query","aggregation_config","query","useCartoTiles","mapFilters","layersConfig","setLayers","getStaticTiles","a","voronoiInfo","QUERY","pharmacyClusterInfo","threshold","placement","columns","aggregate_function","aggregated_column","filters","greater_than","resolution","pharmacyInfo","supermarketInfo","supermarketClusterInfo","supermarketsVoronoiInfo","Promise","all","getTiles","then","voronoi_id","PAINT","pharmacy_id_raw","nombre","direccion","pharmacy_id","pharmacy_labels_id","supermarkets_voronoi_id","supermarket_id_raw","supermarket_id","supermarket_labels_id","oneOfType","ReactMapboxGL","accessToken","layersVisibilityConfig","layerColor","MapboxMap","allLoaded","setAllLoaded","setMap","mapboxgl","supported","alert","fitBounds","containerStyle","position","width","height","Consumer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.64f059d0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Source } from 'react-mapbox-gl';\n\nconst Sources = ({ config, sourceLoad }) => {\n  const [sourcesLoaded, setLoaded] = React.useState({});\n\n  React.useEffect(() => {\n    if (config) {\n      const values = Object.values(config);\n\n      let newObj = {};\n      for (const info of values) {\n        newObj = { ...newObj, [info.id]: false };\n      }\n\n      setLoaded(newObj);\n    }\n  }, [config]);\n\n  React.useEffect(() => {\n    if (sourcesLoaded) {\n      const all = Object.keys(sourcesLoaded).every(k => sourcesLoaded[k] === true);\n      all && sourceLoad(true);\n    }\n  }, [sourcesLoaded]);\n\n  const manageLayersLoaded = layer => {\n    setLoaded({ ...sourcesLoaded, [layer]: true });\n  };\n\n  return (\n    <>\n      {Object.values(config).map(\n        info =>\n          info.isSource && (\n            <Source\n              key={info.sourceId}\n              id={info.sourceId}\n              tileJsonSource={{\n                type: 'vector',\n                tiles: info.pbf,\n                promoteId: info.promoteId || undefined\n              }}\n              onSourceLoaded={() => manageLayersLoaded(info.id)}\n            />\n          )\n      )}\n    </>\n  );\n};\n\nSources.propTypes = {\n  config: PropTypes.oneOfType([PropTypes.object]).isRequired,\n  sourceLoad: PropTypes.func.isRequired\n};\n\nexport { Sources };\n","const CURSOR = 'pointer';\n\nclass HoverEffect {\n  constructor(definition) {\n    this.map = definition.map;\n    this.id = definition.id;\n    this.sourceId = definition.sourceId;\n    this.sourceLayer = definition.sourceLayer;\n    this.popupFieldsConfig = definition.popupFieldsConfig || {};\n    this._hoveredFeature = 0;\n    this._hoveredId = null;\n    this._popupInfo = {};\n  }\n\n  get popupInfo() {\n    return this._popupInfo;\n  }\n\n  mouseMove(e) {\n    this.map.getCanvas().style.cursor = CURSOR;\n\n    if (e.features.length > 0) {\n      if (this._hoveredId) {\n        this.map.setFeatureState(\n          {\n            source: this.sourceId,\n            id: this._hoveredId,\n            sourceLayer: this.sourceLayer\n          },\n          { hover: false }\n        );\n      }\n\n      this._hoveredId = e.features[0].id;\n\n      this.map.setFeatureState(\n        {\n          source: this.sourceId,\n          id: this._hoveredId,\n          sourceLayer: this.sourceLayer\n        },\n        { hover: true }\n      );\n    }\n\n    const coords = e.lngLat;\n\n    const popupFields = Object.keys(this.popupFieldsConfig);\n    const featureProperties = e.features[0].properties;\n\n    for (const popupField of popupFields) {\n      if (featureProperties.hasOwnProperty(popupField)) {\n        this._popupInfo = {\n          ...this._popupInfo,\n          coords: [coords.lng, coords.lat],\n          shouldRender: true,\n          info: {\n            ...this._popupInfo.info,\n            [popupField]: {\n              ...this.popupFieldsConfig[popupField],\n              value: featureProperties[popupField]\n            }\n          }\n        };\n      }\n    }\n  }\n\n  mouseLeave() {\n    this.map.getCanvas().style.cursor = '';\n\n    this._popupInfo = { shouldRender: false };\n\n    if (this._hoveredId) {\n      this.map.setFeatureState(\n        {\n          source: this.sourceId,\n          id: this._hoveredId,\n          sourceLayer: this.sourceLayer\n        },\n        { hover: false }\n      );\n    }\n\n    this._hoveredId = null;\n  }\n}\n\nexport default HoverEffect;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Map } from 'mapbox-gl';\nimport HoverEffect from '../Classes/MapboxHoverEffect';\n\nfunction useMapEvents(map, layersIds) {\n  const [popupConfig, setPopupConfig] = useState({\n    shouldRender: false\n  });\n\n  const [clickedFeature, setFeature] = useState(null);\n\n  function enableEvents() {\n    const mapObject = map;\n\n    const hoverObjects = [];\n    const values = Object.values(layersIds);\n\n    for (let i = 0; i < values.length; i += 1) {\n      hoverObjects.push(\n        new HoverEffect({\n          map: mapObject,\n          id: values[i].id,\n          sourceId: values[i].sourceId,\n          sourceLayer: values[i].sourceLayer,\n          popupFieldsConfig: values[i].popupFieldsConfig\n        })\n      );\n    }\n\n    for (let i = 0; i < values.length; i += 1) {\n      mapObject.on('mousemove', values[i].id, e => {\n        hoverObjects[i].mouseMove(e);\n\n        const popup = hoverObjects[i].popupInfo;\n        popup && setPopupConfig(popup);\n      });\n\n      mapObject.on('mouseleave', values[i].id, () => {\n        hoverObjects[i].mouseLeave();\n\n        const popup = hoverObjects[i].popupInfo;\n        popup && setPopupConfig(popup);\n      });\n\n      mapObject.on('click', values[i].id, e => {\n        e.features.length !== 0 && setFeature(e.features[0]);\n      });\n    }\n  }\n\n  function removeEvents() {\n    const mapObject = map;\n    const launchedIds = Object.values(layersIds);\n\n    for (const id of launchedIds) {\n      mapObject.off('mousemove', id);\n      mapObject.off('mouseleave', id);\n    }\n  }\n\n  React.useEffect(() => {\n    if (map && layersIds) {\n      enableEvents();\n    }\n\n    return () => {\n      removeEvents();\n    };\n  }, [map, layersIds]);\n\n  return [popupConfig, clickedFeature];\n}\n\nuseMapEvents.propTypes = {\n  map: PropTypes.instanceOf(Map).isRequired,\n  layersIds: PropTypes.shape({\n    cadastre_id: PropTypes.object\n  }).isRequired\n};\n\nexport { useMapEvents };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Map } from 'mapbox-gl';\nimport './style.scss';\n\nconst Loader = ({ mapObject }) => {\n\n    const [dataLoading, setDataLoading] = React.useState(true);\n\n    React.useEffect(() => {\n        let tilesRenderedChecker = false;\n\n        if (mapObject) {\n            mapObject.once('styledata', () => { // Catch the 'final rendering'\n                const waiting = () => {\n                    if (!mapObject.isStyleLoaded()) {\n                        setTimeout(waiting, 200);\n                    } else {\n                        if (!tilesRenderedChecker) {\n                            setDataLoading(false);\n                        }\n                        tilesRenderedChecker = true;\n                    }\n                };\n                waiting();\n            });\n        }\n    }, [mapObject]);\n\n    return (\n        <div className={`${dataLoading ? 'loader' : 'loader--close'}`}>\n            <div className=\"CDB-LoaderIcon CDB-LoaderIcon--big\">\n                <svg className=\"CDB-LoaderIcon-spinner\" viewBox=\"0 0 50 50\">\n                    <circle className=\"CDB-LoaderIcon-path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\"></circle>\n                </svg>\n            </div>\n        </div>\n    );\n};\n\nLoader.defaultProps = {\n    mapObject: Map\n};\n\nLoader.propTypes = {\n    mapObject: PropTypes.instanceOf(Map),\n    dataLoading: PropTypes.bool.isRequired\n};\n\nexport { Loader };\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport './style.scss';\n\nconst PopupTemplate = ({ content }) => {\n  const [infos, setInfos] = React.useState([]);\n\n  React.useEffect(() => {\n    if (content) {\n      setInfos(Object.values(content));\n    }\n  }, [content]);\n\n  const formatInfo = value =>\n    typeof value === 'number' ? `${new Intl.NumberFormat('es').format(value)}` : value;\n\n  return (\n    <div className=\"popup-template\">\n      {infos &&\n        infos.map((info, index) => (\n          <Fragment key={`dynamic-${index}`}>\n            <span className={`popup-template--static popup-template--static-${index + 1}`}>\n              {info.fieldLabel}\n            </span>\n            <div className={`popup-template--dynamic popup-template--dynamic-${index + 1}`}>\n              <span>{formatInfo(info.value)}</span>\n              <span>{info.label}</span>\n            </div>\n          </Fragment>\n        ))}\n    </div>\n  );\n};\n\nPopupTemplate.propTypes = {\n  content: PropTypes.oneOfType([PropTypes.object]).isRequired\n};\n\nfunction arePropsEqual(prevProps, nextProps) {\n  return prevProps.content === nextProps.content;\n};\n\nconst component = React.memo(PopupTemplate, arePropsEqual);\n\nexport { component as PopupTemplate };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Map } from 'mapbox-gl';\nimport './style.scss';\n\nimport '@carto/airship-style';\n\nconst LayerSelector = ({ map, layers }) => {\n    const [visibility, setVisibility] = React.useState(null);\n\n    React.useEffect(() => {\n        if (layers) {\n            for (const layer of layers) {\n                if (layer.shouldShowOnInit) {\n                    setVisibility(layer.layersIds[0]);\n                }\n            }\n        }\n    }, []);\n\n\n    const switchVisibility = e => {\n        const id = e.target.name;\n        \n        setVisibility(id);\n\n        for (const config of layers) {\n            for (const layer of config.layersIds) {\n                if (map.getLayer(layer)) {\n                    map.getLayoutProperty(layer, 'visibility') === 'visible' ?\n                        map.setLayoutProperty(layer, 'visibility', 'none') :\n                        map.setLayoutProperty(layer, 'visibility', 'visible');\n                }\n            }\n        }\n    };\n\n    return (\n          <div className=\"layers-picker\">\n            {visibility && layers.map((layer, index) => (\n                <div key={layer.layersIds[0]} className=\"as-radio\">\n                    <input\n                        className=\"as-radio__input\"\n                        type=\"radio\"\n                        name={layer.layersIds[0]}\n                        id={layer.layersIds[0]}\n                        value={index}\n                        checked={visibility === layer.layersIds[0]}\n                        onClick={switchVisibility}\n                    />\n                    <label className=\"as-caption\" htmlFor={layer.layersIds[0]}>{layer.layerTitle}</label>\n                </div>\n            ))}\n          </div>\n    );\n};\n  \nLayerSelector.propTypes = {\n    map: PropTypes.instanceOf(Map).isRequired,\n    layers: PropTypes.arrayOf(\n        PropTypes.shape({\n          shouldShowOnInit: PropTypes.bool,\n          layersIds: PropTypes.arrayOf(PropTypes.string),\n          layerTitle: PropTypes.string,\n          layerColor: PropTypes.string\n        })\n      ).isRequired\n};\n\nexport { LayerSelector };\n","export default {\n    dotgisUser: 'dotgis',\n    dotgisMapsKey: 'wqTxcWJUw09P4IzpBo4kfg',\n  \n    voronoiId: 'voronoi',\n    voronoiSourceId: 'voronoi_source',\n    voronoiSourceLayer: 'voronoi_source_layer',\n\n    pharmacyId: 'pharmacy',\n    pharmacySourceId: 'pharmacy_source_id',\n    pharmacySourceLayer: 'pharmacy_source_layer',\n    aggregatedField: 'pharmacy_aggregated',\n\n    supermarketsVoronoiId: 'supermarkets_voronoi',\n    supermarketsVoronoiSourceId: 'supermarkets_voronoi_source_id',\n    supermarketsVoronoiSourceLayer: 'supermarkets_voronoi_source_layer',\n\n    supermarketsId: 'supermarkets',\n    supermarketsSourceId: 'supermarkets_source_id',\n    supermarketsSourceLayer: 'supermarkets_source_layer',\n    aggregatedSupermarketsField: 'supermarkets_aggregated',\n\n    citiesBounds: {\n      bcn: [\n        [1.8428559879610305, 41.28923112254472],\n        [2.446940749712155, 41.51196575373871]\n      ],\n      madrid: [\n        [-4.2129351236574735, 40.23670360815473],\n        [-3.1320186657642637, 40.64109281781327]\n      ]\n    }\n  };\n  ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Map } from 'mapbox-gl';\nimport { Layer, Popup } from 'react-mapbox-gl';\nimport { useMapEvents } from '../Hooks/useMapEvents';\nimport { PopupTemplate } from '../../components';\nimport CONFIG from '../Config/config';\n\nconst Layers = ({ map, config }) => {\n  const [popupConfig, clickedFeature] = useMapEvents(map, config);\n\n  React.useEffect(() => {\n    if (clickedFeature && clickedFeature.source === CONFIG.pharmacySourceId) {\n      const centerIn = clickedFeature.geometry.coordinates;\n\n      map.flyTo({\n        center: centerIn,\n        zoom: Math.round(map.getZoom() + 2),\n        essential: true\n      });\n    }\n  }, [clickedFeature]);\n\n  return (\n    <>\n      {Object.values(config).map(info => (\n        <Layer\n          key={info.id}\n          id={info.id}\n          type={info.type}\n          sourceId={info.sourceId}\n          sourceLayer={info.sourceLayer}\n          paint={info.paint}\n          layout={info.layout || undefined}\n          minZoom={info.minZoom || undefined}\n          maxZoom={info.maxZoom || undefined}\n        />\n      ))}\n      {popupConfig && popupConfig.coords && (\n        <Popup\n          coordinates={popupConfig.coords}\n          style={{ display: popupConfig.shouldRender ? '' : 'none' }}\n          offset={{\n            bottom: [0, 80]\n          }}\n        >\n          <PopupTemplate content={popupConfig.info} />\n        </Popup>\n      )}\n    </>\n  );\n};\n\nLayers.propTypes = {\n  map: PropTypes.instanceOf(Map).isRequired,\n  config: PropTypes.oneOfType([PropTypes.object]).isRequired\n};\n\nexport { Layers };\n","export default {\n    voronoi: 'SELECT * FROM voronoi_farmacias',\n    pharmacy: 'SELECT * FROM farmacias',\n    supermarketVoronoi: 'SELECT * FROM voronoi_supermkt_madrid',\n    supermarket: 'SELECT * FROM supermercados_madrid'\n};\n","export default {\n    voronoi: {\n        'fill-color': ['case', ['boolean', ['feature-state', 'hover'], false], 'rgba(204, 102, 255, 0.15)', 'rgba(204, 102, 255, 0.1)'],\n        'fill-outline-color': 'rgba(204, 102, 255, 0.3)',\n    },\n    cluster: aggregatedField => ({\n        'circle-color': ['step', ['get', aggregatedField], 'rgba(0, 0, 0, 0)', 100, '#b4d9cc', 750, '#63a6a0', 2000, '#287274'],\n        'circle-radius': [\n            'case',\n            ['>', ['get', aggregatedField], 1],\n            ['step', ['get', aggregatedField], 20, 100, 30, 750, 40],\n            6\n        ],\n    }),\n    pharmacy: {\n        'circle-color': ['case', ['boolean', ['feature-state', 'hover'], false], 'rgb(255, 102, 0)', 'rgb(0, 255, 0)'],\n        'circle-radius': ['interpolate', ['exponential', 0.7], ['zoom'], 10, 0, 20, 5]\n    },\n    supermarket: {\n        'circle-color': ['case', ['boolean', ['feature-state', 'hover'], false], 'rgb(255, 102, 0)', 'rgb(0, 102, 255)'],\n        'circle-radius': ['interpolate', ['exponential', 0.7], ['zoom'], 10, 0, 20, 5]\n    },\n    label_paint: labelField => ({\n        textColor: {\n            'text-color': ['case', ['>', ['get', labelField], 100], '#333', 'rgba(0, 0, 0, 0)']\n        },\n        layout: {\n            'text-field': `{${labelField}}`,\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            'text-size': ['step', ['get', labelField], 12, 100, 13, 750, 14],\n            'text-allow-overlap': true\n        }\n    })\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n// import CartoMVTRequest from '../Classes/CartoMVTRequest.js';\nimport QUERY from '../Config/queries';\nimport CONFIG from '../Config/config';\nimport PAINT from '../Config/paints';\n\nclass CartoMVTRequest {\n  constructor(definition) {\n    this.cartoAccount = definition.cartoAccount;\n    this.cartoMapsKey = definition.cartoMapsKey;\n    this.id = definition.id;\n    this.sql = definition.sql;\n    this.getGeoJSON = definition.getGeoJSON;\n    this.aggregationConfig = definition.aggregationConfig;\n  }\n\n  async getTiles() {\n    const mapConfig = {\n      buffersize: { mvt: 1 },\n      layers: [\n        {\n          id: this.id,\n          type: 'mapnik',\n          options: {\n            sql: this.sql,\n            aggregation: this.aggregationConfig || undefined,\n            id: 'cartodb_id'\n          }\n        }\n      ]\n    };\n\n    const response = await fetch(\n      `https://${this.cartoAccount}.carto.com/api/v1/map${\n        this.cartoMapsKey ? `?api_key=${this.cartoMapsKey}` : ''\n      }`,\n      {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(mapConfig)\n      }\n    );\n\n    const layergroup = await response.json();\n\n    return layergroup.metadata.tilejson.vector.tiles;\n  }\n\n  get requestInfo() {\n    return {\n      carto_account: this.cartoAccount,\n      carto_maps_key: this.cartoMapsKey,\n      request_id: this.id,\n      sql_query: this.sql,\n      aggregation_config: this.aggregationConfig || undefined\n    };\n  }\n\n  set updateSql(query) {\n    this.sql = query;\n  }\n}\n\nfunction useCartoTiles(mapFilters) {\n  const [layersConfig, setLayers] = useState(null);\n\n  const getStaticTiles = async () => {\n      \n    const voronoiInfo = new CartoMVTRequest({\n      cartoAccount: CONFIG.dotgisUser,\n      cartoMapsKey: CONFIG.dotgisMapsKey,\n      id: CONFIG.voronoiSourceLayer,\n      sql: QUERY.voronoi\n    });\n\n    const pharmacyClusterInfo = new CartoMVTRequest({\n      cartoAccount: CONFIG.dotgisUser,\n      cartoMapsKey: CONFIG.dotgisMapsKey,\n      id: CONFIG.pharmacySourceLayer,\n      sql: QUERY.pharmacy,\n      aggregationConfig: {\n        threshold: 1,\n        placement: 'centroid',\n        columns: {\n          [CONFIG.aggregatedField]: {\n            aggregate_function: 'count',\n            aggregated_column: 'rid'\n          }\n        },\n        filters: {\n          [CONFIG.aggregatedField]: { greater_than: 1 }\n        },\n        resolution: 64\n      }\n    });\n\n    const pharmacyInfo = new CartoMVTRequest({\n      cartoAccount: CONFIG.dotgisUser,\n      cartoMapsKey: CONFIG.dotgisMapsKey,\n      id: `${CONFIG.pharmacySourceLayer}_raw`,\n      sql: QUERY.pharmacy\n    });\n\n    const supermarketInfo = new CartoMVTRequest({\n      cartoAccount: CONFIG.dotgisUser,\n      cartoMapsKey: CONFIG.dotgisMapsKey,\n      id: `${CONFIG.supermarketsSourceLayer}_raw`,\n      sql: QUERY.supermarket\n    });\n\n    const supermarketClusterInfo = new CartoMVTRequest({\n      cartoAccount: CONFIG.dotgisUser,\n      cartoMapsKey: CONFIG.dotgisMapsKey,\n      id: CONFIG.supermarketsSourceLayer,\n      sql: QUERY.supermarket,\n      aggregationConfig: {\n        threshold: 1,\n        placement: 'centroid',\n        columns: {\n          [CONFIG.aggregatedSupermarketsField]: {\n            aggregate_function: 'count',\n            aggregated_column: 'id_super'\n          }\n        },\n        filters: {\n          [CONFIG.aggregatedSupermarketsField]: { greater_than: 1 }\n        },\n        resolution: 64\n      }\n    });\n\n    const supermarketsVoronoiInfo = new CartoMVTRequest({\n      cartoAccount: CONFIG.dotgisUser,\n      cartoMapsKey: CONFIG.dotgisMapsKey,\n      id: CONFIG.supermarketsVoronoiSourceLayer,\n      sql: QUERY.supermarketVoronoi\n    });\n\n    Promise.all([\n      voronoiInfo.getTiles(),\n      pharmacyClusterInfo.getTiles(),\n      pharmacyInfo.getTiles(),\n      supermarketInfo.getTiles(),\n      supermarketClusterInfo.getTiles(),\n      supermarketsVoronoiInfo.getTiles()\n    ]).then(response => {\n      setLayers({\n        voronoi_id: {\n          isSource: true,\n          id: CONFIG.voronoiId,\n          sourceId: CONFIG.voronoiSourceId,\n          sourceLayer: CONFIG.voronoiSourceLayer,\n          pbf: response[0],\n          promoteId: 'cartodb_id',\n          type: 'fill',\n          paint: PAINT.voronoi,\n          layout: {\n            'visibility': 'visible'\n          }\n        },\n        pharmacy_id_raw: {\n          isSource: true,\n          id: `${CONFIG.pharmacyId}_raw`,\n          sourceId: `${CONFIG.pharmacySourceId}_raw`,\n          sourceLayer: `${CONFIG.pharmacySourceLayer}_raw`,\n          pbf: response[2],\n          promoteId: 'cartodb_id',\n          type: 'circle',\n          paint: PAINT.pharmacy,\n          popupFieldsConfig: {\n            nombre: {\n              fieldLabel: 'Nombre',\n              label: ''\n            },\n            direccion: {\n              fieldLabel: 'Dirección',\n              label: ''\n            },\n          },\n          layout: {\n            'visibility': 'visible'\n          }\n        },\n        pharmacy_id: {\n          isSource: true,\n          id: CONFIG.pharmacyId,\n          sourceId: CONFIG.pharmacySourceId,\n          sourceLayer: CONFIG.pharmacySourceLayer,\n          pbf: response[1],\n          promoteId: 'cartodb_id',\n          type: 'circle',\n          paint: PAINT.cluster(CONFIG.aggregatedField),\n          layout: {\n            'visibility': 'visible'\n          }\n        },\n        pharmacy_labels_id: {\n          id: `${CONFIG.pharmacyId}_labels`,\n          sourceId: CONFIG.pharmacySourceId,\n          sourceLayer: CONFIG.pharmacySourceLayer,\n          pbf: response[1],\n          promoteId: 'cartodb_id',\n          type: 'symbol',\n          paint: PAINT.label_paint(CONFIG.aggregatedField).textColor,\n          layout: { 'visibility': 'visible', ...PAINT.label_paint(CONFIG.aggregatedField).layout }\n        },\n        supermarkets_voronoi_id: {\n          isSource: true,\n          id: CONFIG.supermarketsVoronoiId,\n          sourceId: CONFIG.supermarketsVoronoiSourceId,\n          sourceLayer: CONFIG.supermarketsVoronoiSourceLayer,\n          pbf: response[5],\n          promoteId: 'cartodb_id',\n          type: 'fill',\n          paint: PAINT.voronoi,\n          layout: {\n            'visibility': 'none'\n          }\n        },\n        supermarket_id_raw: {\n          isSource: true,\n          id: `${CONFIG.supermarketsId}_raw`,\n          sourceId: `${CONFIG.supermarketsSourceId}_raw`,\n          sourceLayer: `${CONFIG.supermarketsSourceLayer}_raw`,\n          pbf: response[3],\n          promoteId: 'cartodb_id',\n          type: 'circle',\n          paint: PAINT.supermarket,\n          popupFieldsConfig: {\n            nombre: {\n              fieldLabel: 'Nombre',\n              label: ''\n            },\n            direccion: {\n              fieldLabel: 'Dirección',\n              label: ''\n            },\n          },\n          layout: {\n            'visibility': 'none'\n          }\n        },\n        supermarket_id: {\n          isSource: true,\n          id: CONFIG.supermarketsId,\n          sourceId: CONFIG.supermarketsSourceId,\n          sourceLayer: CONFIG.supermarketsSourceLayer,\n          pbf: response[4],\n          promoteId: 'cartodb_id',\n          type: 'circle',\n          paint: PAINT.cluster(CONFIG.aggregatedSupermarketsField),\n          layout: {\n            'visibility': 'none'\n          }\n        },\n        supermarket_labels_id: {\n          id: `${CONFIG.supermarketsId}_labels`,\n          sourceId: CONFIG.supermarketsSourceId,\n          sourceLayer: CONFIG.supermarketsSourceLayer,\n          pbf: response[4],\n          promoteId: 'cartodb_id',\n          type: 'symbol',\n          paint: PAINT.label_paint(CONFIG.aggregatedSupermarketsField).textColor,\n          layout: { 'visibility': 'none', ...PAINT.label_paint(CONFIG.aggregatedSupermarketsField).layout }\n        },\n      });\n    });\n  };\n\n  React.useEffect(() => {\n    getStaticTiles(mapFilters);\n  }, [mapFilters]);\n\n  return [layersConfig];\n}\n\nuseCartoTiles.propTypes = {\n  mapFilters: PropTypes.oneOfType([PropTypes.object]).isRequired\n};\n\nexport { useCartoTiles };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport mapboxgl from 'mapbox-gl';\nimport ReactMapboxGL, { MapContext, ZoomControl } from 'react-mapbox-gl';\nimport { Sources, Layers, useCartoTiles } from '../layers';\nimport { Loader, LayerSelector } from '../components';\nimport CONFIG from '../layers/Config/config';\n\nconst Map = ReactMapboxGL({\n  accessToken:\n    'pk.eyJ1IjoiZG90Z2lzIiwiYSI6ImNqd3Z6amtjMTBjOTA0OW84ZjVvYzF6bjQifQ.LIbUaYq3GaiWTzsBV6YnTA'\n});\n\nconst style = 'mapbox://styles/mapbox/dark-v10';\n\nconst checkBrowserSupport = () => {\n  if (!mapboxgl.supported()) {\n    // eslint-disable-next-line\n    alert('Tu navegador no soporta Mapbox GL JS.');\n    return false;\n  }\n  return true;\n};\n\nconst layersVisibilityConfig = [\n  { shouldShowOnInit: true, layersIds: [CONFIG.pharmacyId, CONFIG.voronoiId, `${CONFIG.pharmacyId}_raw`, `${CONFIG.pharmacyId}_labels`], layerTitle: 'Farmacias', layerColor: 'rgb(0, 255, 0)' },\n  { shouldShowOnInit: false, layersIds: [CONFIG.supermarketsId, CONFIG.supermarketsVoronoiId, `${CONFIG.supermarketsId}_raw`, `${CONFIG.supermarketsId}_labels`], layerTitle: 'Supermercados', layerColor: 'rgb(0, 102, 255)' }\n]\n\nconst MapboxMap = ({ mapFilters }) => {\n\n  const [allLoaded, setAllLoaded] = React.useState(false);\n  const [mapObject, setMap] = React.useState(null);\n  const [layersConfig] = useCartoTiles(mapFilters);\n\n  return (\n    <>\n      {checkBrowserSupport() && (\n        <>\n          {\n            mapObject && (\n              <>\n                <Loader mapObject={mapObject} />\n                <LayerSelector key=\"layer-picker\" map={mapObject} layers={layersVisibilityConfig} />\n              </>\n            )\n          }\n          <Map\n            style={style}\n            fitBounds={[\n              [-4.2129351236574735, 40.23670360815473],\n              [-3.1320186657642637, 40.64109281781327]\n            ]}\n            containerStyle={{\n              position: 'absolute',\n              width: '100%',\n              height: '100%'\n            }}\n          >\n            <MapContext.Consumer>\n              {map => {\n                setMap(map);\n\n                return (\n                  <>\n                    {layersConfig && (\n                      <>\n                        <Sources\n                          key=\"sources\"\n                          config={layersConfig}\n                          sourceLoad={response => setAllLoaded(response)}\n                        />\n                        {allLoaded && (\n                          <>\n                            <Layers key=\"map\" map={map} config={layersConfig} />\n                          </>\n                        )}\n                        <ZoomControl key=\"zoom-control\" position=\"bottom-left\" />\n                      </>\n                    )}\n                  </>\n                );\n              }}\n            </MapContext.Consumer>\n          </Map>\n        </>\n      )}\n    </>\n  );\n};\n\nMapboxMap.propTypes = {\n  mapFilters: PropTypes.oneOfType([PropTypes.object]).isRequired\n};\n\nexport default MapboxMap;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './map';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}